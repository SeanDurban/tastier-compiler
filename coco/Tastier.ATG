COMPILER Tastier

	 const int // object kinds
			var = 0, proc = 1;

	 const int // types
			undef = 0, integer = 1, boolean = 2;

	 public SymbolTable tab;
	 public CodeGenerator gen;
	
/*-------------------------------------------------------------------------------------------*/

CHARACTERS

	cr  = '\r'.
	lf  = '\n'.
	tab = '\t'.
	digit = "0123456789".
	letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
	stringCh = ANY - '"' - '\\' - cr - lf - tab.
	printableCh = '\u0020' .. '\u007e'.

/*-------------------------------------------------------------------------------------------*/

TOKENS

	number = digit { digit }.
	ident = letter { letter | digit }.
	string = '"' {stringCh | '\\' printableCh} '"'.

/*-------------------------------------------------------------------------------------------*/

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

/*-------------------------------------------------------------------------------------------*/

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------------------------*/

PRODUCTIONS

AddOp<out Op op>
=                        (. op = Op.ADD; .)
	( '+'
	| '-'                  (. op = Op.SUB; .)
	)
.

/*-------------------------------------------------------------------------------------------*/

Expr<out int reg,        // load value of Expr into register
		 out int type>       (. int typeR, regR; Op op; .)
	= SimExpr<out reg,
						out type>
	[ RelOp<out op>
		SimExpr<out regR,
						out typeR>   (.
														if (type == typeR) {
															 type = boolean;
															 gen.RelOp(op, reg, regR);
														}
														else SemErr("incompatible types");
												 .)
	 ]                     (. gen.ClearRegisters(); .)
.

/*-------------------------------------------------------------------------------------------*/

Primary<out int reg,     // load Primary into register
				out int type>    (. int n; Obj obj; string name; int indexReg=0; .)
=                        (.
														type = undef;
														reg = gen.GetRegister();
												 .)
	( Ident<out name>      
		[
			'['
			SimExpr<out indexReg, out type>
			']'		
		]
												(.
														obj = tab.Find(name); type = obj.type;
														if (obj.kind == var) {
															if(obj.isArray==0){
	
																	if(!obj.param){
																		if (obj.level == 0)
																			gen.LoadGlobal(reg, obj.adr, name);
												 						else
												 							gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
												 					}
												 					//if obj is Param then value is the reference(the addr)
												 					//Store value at this address 
												 					else{
												 						int freeReg = gen.GetRegister();
												 						//Check reg isnt same as Primary reg (Expr resets)
												 						if(freeReg==reg){
												 							freeReg=gen.GetRegister();
												 						}
												 						if(obj.level==0)
												 							gen.LoadGlobal(freeReg, obj.adr,name);
												 						else
												 							gen.LoadLocal(freeReg,tab.curLevel-obj.level, obj.adr, name);
												 						gen.MoveRegister(2,freeReg);
												 						gen.LoadLocalValue(reg, name);
												 					}														 	
															 	if (type == boolean)
															 	// reset Z flag in CPSR
																	gen.ResetZ(reg);
															}
															else{

																if (obj.level == 0)
																	gen.LoadIndexedGlobal(reg, obj.adr,indexReg, name);
																else
																	gen.LoadIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, indexReg, name);
																if (type == boolean)
																// reset Z flag in CPSR
																	gen.ResetZ(reg);
								
															}
														}
														else SemErr("variable expected");
												 .)

	| number               (.
														type = integer;
														n = Convert.ToInt32(t.val);
														gen.LoadConstant(reg, n);
												 .)

	| '-'
		Primary<out reg,
						out type>     (.
														if (type == integer)
															 gen.NegateValue(reg);
														else SemErr("integer type expected");
												 .)

	| "true"               (.
															 type = boolean;
															 gen.LoadTrue(reg);
												 .)

	| "false"              (.
															 type = boolean;
															 gen.LoadFalse(reg);
												 .)

	| '('
		Expr<out reg,
				 out type>
		')'


	)
.

/*-------------------------------------------------------------------------------------------*/

Ident<out string name>
= ident                  (. name = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

String<out string text>
= string                  (. text = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

MulOp<out Op op>
=                        (. op = Op.MUL; .)
	( '*'
	| ("div" | "DIV")      (. op = Op.DIV; .)
	| ("mod" | "MOD")      (. op = Op.MOD; .)
	)
.

/*-------------------------------------------------------------------------------------------*/

ProcDecl<string progName>
												 (.  string procName; int numParam=0; string pName;
												 string[] pNames= new string[10];.)
= "void"
	Ident<out procName>    (.
														tab.NewObj(procName, proc, undef,0);
														if (procName == "main")
															 if (tab.curLevel == 0)
																	tab.mainPresent = true;
															 else SemErr("main not at lexic level 0");
														tab.OpenScope();
												 .)
	'(' 										//ParamDecl<out pName> creates the param objects and counts numParams
		{
			ParamDecl<out pName> 							(. pNames[numParam] = pName; numParam++;.)
			{',' ParamDecl<out pName>						(. pNames[numParam] = pName;numParam++;.)
			}
		}

	')'													
	'{'										 	(. //Generates label for body of proc
														if (procName == "main")
															 gen.Label("Main", "Body");
														else {
															 gen.ProcNameComment(procName);
															 gen.Label(procName, "Body");
														}
												.)
												(. //Load the local instances of the params with the address of the ref 
													//to var passed. These are held in registers starting at R5
												  	int i=0;
												  	Obj param;
												  	//Free registers limited to 6 (R5-R9, R12)
												  	if(numParam>6)
												  		SemErr("Too many parameters.");
												  	for(i=0;i<numParam;i++){
												  		param=tab.Find(pNames[i]);
												  		int reg =5+i;
												  		gen.LoadLocalAddress(tab.curLevel-param.level,param.adr);
												  		gen.StoreLocalValue(reg, pNames[i]);
												  	}
												.)
		 {
		 VarDecl   
		 }
		 {
		 ArrayDecl
		 }
		 {
		 ConstDecl
		 }
		 {
		 ProcDecl<progName>
		 }                  
		 Stat { Stat }
	'}'                    (.
														if (procName == "main") {
															 gen.StopProgram(progName);
															 gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
														} else {
															 gen.Return(procName);
															 gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
														}
														tab.CloseScope();
												 .)
.

/*-------------------------------------------------------------------------------------------*/

RelOp<out Op op>
=                        (. op = Op.EQU; .)
	( "="
	| '<'                  (. op = Op.LSS; .)
	| '>'                  (. op = Op.GTR; .)
	| "!="                 (. op = Op.NEQ; .)
	| "<="                 (. op = Op.LEQ; .)
	| ">="                 (. op = Op.GEQ; .)
	)
.

/*-------------------------------------------------------------------------------------------*/

SimExpr<out int reg,     //load value of SimExpr into register
				out int type>    (. int typeR, regR; Op op; .)
= Term<out reg,
			 out type>
	{ AddOp<out op>
		Term<out regR,
				 out typeR>      (.
														if (type == integer && typeR == integer)
															 gen.AddOp(op, reg, regR);
														else SemErr("integer type expected");
												 .)
	}
.

/*-------------------------------------------------------------------------------------------*/

Stat                     (. int type; string name; Obj obj; int reg; int regOffset; int type1; .)
= Ident<out name>        (. obj = tab.Find(name); .)
(	 

		":="                			 (.
										if (obj.kind != var)
										SemErr("cannot assign to procedure");
									 .)
		(

		['(']Expr<out reg,
				 out type> 
			(
				//Standard assignment
				';'   			(.	
									if (type == obj.type){
										if(obj.constant==0||(obj.constant==1&&obj.assigned==0)){
											obj.assigned= obj.assigned+1;
											if (obj.level == 0){
												gen.StoreGlobal(reg, obj.adr, name); 
											}
											else{
													if(!obj.param){
												 		gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
												 	}
												 	//if obj is Param then value is the reference(the addr)
												 	//Store value at this address 
												 	else{
												 		int freeReg = gen.GetRegister();
												 		if(freeReg==reg){
												 			freeReg=gen.GetRegister();
												 		}
												 		gen.LoadLocal(freeReg,tab.curLevel-obj.level, obj.adr, name);
												 		gen.MoveRegister(2,freeReg);
												 		gen.StoreLocalValue(reg, name);
												 	}
												}
										}
										else{ SemErr("cannot assign another new value to a constant");}
									}
								.)
				//Condtional Stat
				| [')'] '?' 	(. 
									int exp2, endCon,reg2,reg3,regToStore,type2,type3;
									exp2 =0;
									 if (type == boolean) {
										exp2 = gen.NewLabel();
										gen.BranchFalse(exp2);
									 } 
									 else SemErr("boolean type expected");
								 .)
					Expr<out reg2, out type2>
					':' 
								(. 	regToStore=reg2; //Set regToStore to result of expr1
									endCon= gen.NewLabel(); 
									gen.Branch(endCon); //If expr1 stored then skip to end of cond statement
									gen.Label(exp2);	//label expr2 
								.)
					Expr<out reg3, out type3> 
					';'	
									//Set regToStore to result of expr2
								 	(. regToStore= reg3; .)
									//Store Correct Expr
									(. 
										gen.Label(endCon);
										if (type3 == obj.type&&type2 == obj.type){
											if(obj.constant==0||(obj.constant==1&&obj.assigned==0)){
												obj.assigned= obj.assigned+1;
												if (obj.level == 0){
													gen.StoreGlobal(regToStore, obj.adr, name); 
												}
												else{
													if(!obj.param){
												 		gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
												 	}
												 	//if obj is Param then value is the reference(the addr)
												 	//Store value at this address 
												 	else{
												 		int freeReg = gen.GetRegister();
												 		if(freeReg==reg){
												 			freeReg=gen.GetRegister();
												 		}
												 		gen.LoadLocal(freeReg,tab.curLevel-obj.level, obj.adr, name);
												 		gen.MoveRegister(2,freeReg);
												 		gen.StoreLocalValue(reg, name);
												 	}
												}
											}
											else{ SemErr("cannot assign another new value to a constant");}
										}	

									
										
								 .)

			)
		//whole array initialise
		| '{'					(. int n=0;int indexReg; .)
			{					
				SimExpr<out reg, 
					out type>	(. if(type==obj.type){
										indexReg= gen.GetRegister();
										if(obj.isArray==1){
											gen.LoadConstant(indexReg,n);
											if (obj.level == 0){
												gen.StoreIndexedGlobal(reg, obj.adr, indexReg ,name); 
											}
											else{ gen.StoreIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, indexReg,name);}	
											n++;
											if(n>obj.arraySize)
												SemErr("Number of elements does not match size of array.");
										}
										else
											SemErr("Identifier not an array.");
									}
									else
										SemErr("Type mismatch.");

									gen.ClearRegisters();
								.)
				|','	
			} 
			'}' ';'				(.
									if(n!=obj.arraySize)
										SemErr("Number of elements does not match size of array.");
								.)
		)	
	//Array element assignment a[i] 						
	|	'['						
		SimExpr<out regOffset, out type1>
		']' ":=" 
		Expr<out reg, out type> ';' (.	
										if(obj.isArray==1){
											if(type==obj.type){
												if(obj.level==0)
													gen.StoreIndexedGlobal(reg, obj.adr, regOffset, name);
												else gen.StoreIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, regOffset, name);
											}
											else SemErr("Type Mismatch - Type does not match Array Type.");
										}
										else{
											SemErr("Ident not an array.");
										}
									.)

	//Function call
	| 	'(' 					(. string paramName; Obj param; int paramReg; .)
			{
				Ident<out paramName>	(. 
											param= tab.Find(paramName);
											if(param.level==0){
												gen.LoadGlobalAddress(param.adr);
											}	
											else
												gen.LoadLocalAddress(tab.curLevel-param.level, param.adr);
											//Address of param now in R2 so move it to free reg
											paramReg = gen.GetRegister();
											//Check to ensure TOP and BP not corrupted
											while(paramReg==10||paramReg==11){
												paramReg= gen.GetRegister();
											}
											gen.MoveRegister(paramReg, 2);
										.)
				{
					','
					Ident<out paramName>(. 
											param= tab.Find(paramName);
											if(param.level==0){
												gen.LoadGlobalAddress(param.adr);
											}	
											else
												gen.LoadLocalAddress(tab.curLevel-param.level, param.adr);
											//Address of param now in R2 so move it to free reg
											paramReg = gen.GetRegister();
										
											gen.MoveRegister(paramReg, 2);
											
										.)
				}
			}	
		')' ';'         	 (.
								if (obj.kind == proc)
									gen.Call(name);
								else SemErr("object is not a procedure");
							.)
	//Post increment 
	| "++"
		';'					(.  
							if(obj.type==1){  //Integer check
								int valueReg = gen.GetRegister();
								//Load value in valueReg
								if(obj.level==0)
									gen.LoadGlobal(valueReg, obj.adr, name);
								else
									gen.LoadLocal(valueReg, tab.curLevel-obj.level, obj.adr, name);
								//Load 1 into constReg
								int constReg= gen.GetRegister();
								gen.LoadConstant(constReg, 1);
								//Apply Add Op
								gen.AddOp(Op.ADD, valueReg, constReg);
								//Store result back
								if(obj.level==0)
									gen.StoreGlobal(valueReg,obj.adr,name);
								else
									gen.StoreLocal(valueReg, tab.curLevel-obj.level, obj.adr, name);

							}  
							else
								SemErr("Object is not an integer.");
							.)
	//Post decrement 
	| "--"
		';'					(.  
							if(obj.type==1){  //Integer check
								int valueReg = gen.GetRegister();
								//Load value in valueReg
								if(obj.level==0)
									gen.LoadGlobal(valueReg, obj.adr, name);
								else
									gen.LoadLocal(valueReg, tab.curLevel-obj.level, obj.adr, name);
								int constReg= gen.GetRegister();
								//Load 1 into constReg
								gen.LoadConstant(constReg, 1);
								//Apply Sub Op 
								gen.AddOp(Op.SUB, valueReg, constReg);
								//Store result back
								if(obj.level==0)
									gen.StoreGlobal(valueReg,obj.adr,name);
								else
									gen.StoreLocal(valueReg, tab.curLevel-obj.level, obj.adr, name);

							}  
							else
								SemErr("Object is not an integer.");
							.)
)	


| "if"                   (. int l1, l2; l1 = 0; .)
	Expr<out reg,
			 out type>         (.
														if (type == boolean) {
															 l1 = gen.NewLabel();
															 gen.BranchFalse(l1);
														}
														else SemErr("boolean type expected");
												 .)
			Stat               (.
														l2 = gen.NewLabel();
														gen.Branch(l2);
														gen.Label(l1);
												 .)
			[ "else"
			Stat
			]               	 (. gen.Label(l2); .)

| "while"                (.
														int l1, l2;
														l1 = gen.NewLabel();
														gen.Label(l1); l2=0;
												 .)
	Expr<out reg,
			 out type>         (.
														if (type == boolean) {
															 l2 = gen.NewLabel();
															 gen.BranchFalse(l2);
														}
														else SemErr("boolean type expected");
												 .)
	 Stat                  (.
														gen.Branch(l1);
														gen.Label(l2);
												 .)

| "for" '('						(.int forL, endForL, incrL,reg2,  type2; .)
	Stat				
								(. forL= gen.NewLabel(); 
								   endForL = gen.NewLabel(); 
								   incrL = gen.NewLabel();
								   gen.Branch(incrL);
								   gen.Label(forL);
								.)
	Stat
								(.
									gen.Label(incrL);
									
								.)
		
	
	Expr<out reg2, out type2> 
								(.
								
									if (type2 == boolean) {
										gen.BranchFalse(endForL);
									}
									else SemErr("boolean type expected");
								.)
	')'					

	Stat				
								(.gen.Branch(forL);
								 gen.Label(endForL); .)

| "read"
	Ident<out name> ';'    (.
														obj = tab.Find(name);
														if (obj.type == integer) {
															 gen.ReadInteger(); 
															 if (obj.level == 0)
																	gen.StoreGlobal(0, obj.adr, name);
									
															 else{
																if(!obj.param){
												 					gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
												 				}
												 				//if obj is Param then value is the reference(the addr)
												 				//Store value at this address 
												 				else{
												 					int freeReg = gen.GetRegister();
												 					gen.LoadLocal(freeReg,tab.curLevel-obj.level, obj.adr, name);
												 					gen.MoveRegister(2,freeReg);
												 					gen.StoreLocalValue(0, name);
												 				}
															}
														}
														else SemErr("integer type expected");
												 .)

| "write"                (. string text; .)
	(
		Expr<out reg,
				 out type>       (.
														switch (type) {
															 case integer: gen.WriteInteger(reg, false);
																						 break; 
															 case boolean: gen.WriteBoolean(false);
																						 break;
														}
												 .)
	| String<out text>     (. gen.WriteString(text); .)
	)
	';'

| "writeln"
	// note - for strings use write with \n in text
	Expr<out reg,
			 out type>           (.
															switch (type) {
																 case integer: gen.WriteInteger(reg, true);
																							 break;
																 case boolean: gen.WriteBoolean(true);
																							 break;
															}
													 .)
	';'

| '{'                      (. tab.OpenSubScope(); .)
	{ VarDecl }
	{ ConstDecl }
	{ ArrayDecl }
	Stat { Stat }
	'}'                      (. tab.CloseSubScope(); .)

.     
					 								
/*-------------------------------------------------------------------------------------------*/

Tastier                  (. string progName; .)
	= "program"
	Ident<out progName>    (. tab.OpenScope(); .)
	'{'
		{ VarDecl | ConstDecl | ArrayDecl }          // global variables
		{ ProcDecl<progName> }
												 (. tab.CloseScope(); .)
	'}'
.

/*-------------------------------------------------------------------------------------------*/

Term<out int reg,        // load value of Term into register
		 out int type>       (. int typeR, regR; Op op; .)
	= Primary<out reg,
						out type>
	{ MulOp<out op>
		Primary<out regR,
						out typeR>
												 (.
														if (type == integer && typeR == integer)
															 gen.MulOp(op, reg, regR);
														else SemErr("integer type expected");
												 .)
	}
.


NumberVal<out int val>
=	number (.  val = Convert.ToInt32(t.val); .)
.
/*-------------------------------------------------------------------------------------------*/

Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 )
.

/*-------------------------------------------------------------------------------------------*/

ArrayDecl               (. string name; int type; int size; Obj curScope; .)
= "Array"
	Type<out type>
	Ident<out name>       
	'['
		NumberVal<out size>
	']'
 ";"		 (. tab.NewObj(name, var, type, 0, 1, size); 
 				curScope = tab.topScope;
 				if(curScope==null)
 					SemErr("Scope null.");
 				curScope.nextAdr = curScope.nextAdr+size;  //Allocate space for the elems of the arr.
 			
 			.)

.

/*-------------------------------------------------------------------------------------------*/

ConstDecl                  (. string name; int type; .)
= "Final"
	Type<out type>
	Ident<out name>        (. tab.NewObj(name, var, type, 1); .)
 ";"
.

/*-------------------------------------------------------------------------------------------*/
VarDecl                  (. string name; int type; .)
= Type<out type>
	Ident<out name>        (. tab.NewObj(name, var, type,0); .)
	{ ","
		Ident<out name>      (. tab.NewObj(name, var, type,0); .)
	} ";"
.

/*-------------------------------------------------------------------------------------------*/
ParamDecl<out string pName>                 (. string name; int type; .)
= 	Type<out type>
	Ident<out name>  				      (. pName=name;
												tab.NewObj(name, var, type,0, true); .)

.

END Tastier.
