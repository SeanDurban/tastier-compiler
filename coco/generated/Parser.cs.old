/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/

using System;

namespace Tastier {



public class Parser {
	public const int _EOF = 0;
	public const int _number = 1;
	public const int _ident = 2;
	public const int _string = 3;
	public const int maxT = 45;

	const bool T = true;
	const bool x = false;
	const int minErrDist = 2;
	
	public Scanner scanner;
	public Errors  errors;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

const int // object kinds
			var = 0, proc = 1;

	 const int // types
			undef = 0, integer = 1, boolean = 2;

	 public SymbolTable tab;
	 public CodeGenerator gen;
	
/*-------------------------------------------------------------------------------------------*/



	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (string msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	bool StartOf (int s) {
		return set[s, la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
	void AddOp(out Op op) {
		op = Op.ADD; 
		if (la.kind == 4) {
			Get();
		} else if (la.kind == 5) {
			Get();
			op = Op.SUB; 
		} else SynErr(46);
	}

	void Expr(out int reg,        // load value of Expr into register
out int type) {
		int typeR, regR; Op op; 
		SimExpr(out reg,
out type);
		if (StartOf(1)) {
			RelOp(out op);
			SimExpr(out regR,
out typeR);
			if (type == typeR) {
			 type = boolean;
			 gen.RelOp(op, reg, regR);
			}
			else SemErr("incompatible types");
			
		}
		gen.ClearRegisters(); 
	}

	void SimExpr(out int reg,     //load value of SimExpr into register
out int type) {
		int typeR, regR; Op op; 
		Term(out reg,
out type);
		while (la.kind == 4 || la.kind == 5) {
			AddOp(out op);
			Term(out regR,
out typeR);
			if (type == integer && typeR == integer)
			 gen.AddOp(op, reg, regR);
			else SemErr("integer type expected");
			
		}
	}

	void RelOp(out Op op) {
		op = Op.EQU; 
		switch (la.kind) {
		case 21: {
			Get();
			break;
		}
		case 22: {
			Get();
			op = Op.LSS; 
			break;
		}
		case 23: {
			Get();
			op = Op.GTR; 
			break;
		}
		case 24: {
			Get();
			op = Op.NEQ; 
			break;
		}
		case 25: {
			Get();
			op = Op.LEQ; 
			break;
		}
		case 26: {
			Get();
			op = Op.GEQ; 
			break;
		}
		default: SynErr(47); break;
		}
	}

	void Primary(out int reg,     // load Primary into register
out int type) {
		int n; Obj obj; string name; int indexReg=0; 
		type = undef;
		reg = gen.GetRegister();
		
		switch (la.kind) {
		case 2: {
			Ident(out name);
			if (la.kind == 6) {
				Get();
				SimExpr(out indexReg, out type);
				Expect(7);
			}
			obj = tab.Find(name); type = obj.type;
			if (obj.kind == var) {
			if(obj.isArray==0){
			
					if(!obj.param){
						if (obj.level == 0)
							gen.LoadGlobal(reg, obj.adr, name);
							else
								gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
						}
						//if obj is Param then value is the reference(the addr)
						//Store value at this address 
						else{
							int freeReg = gen.GetRegister();
							//Check reg isnt same as Primary reg (Expr resets)
							if(freeReg==reg){
								freeReg=gen.GetRegister();
							}
							if(obj.level==0)
								gen.LoadGlobal(freeReg, obj.adr,name);
							else
								gen.LoadLocal(freeReg,tab.curLevel-obj.level, obj.adr, name);
							gen.MoveRegister(2,freeReg);
							gen.LoadLocalValue(reg, name);
						}														 	
			 	if (type == boolean)
			 	// reset Z flag in CPSR
					gen.ResetZ(reg);
			}
			else{
			
				if (obj.level == 0)
					gen.LoadIndexedGlobal(reg, obj.adr,indexReg, name);
				else
					gen.LoadIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, indexReg, name);
				if (type == boolean)
				// reset Z flag in CPSR
					gen.ResetZ(reg);
			
			}
			}
			else SemErr("variable expected");
			
			break;
		}
		case 1: {
			Get();
			type = integer;
			n = Convert.ToInt32(t.val);
			gen.LoadConstant(reg, n);
			
			break;
		}
		case 5: {
			Get();
			Primary(out reg,
out type);
			if (type == integer)
			 gen.NegateValue(reg);
			else SemErr("integer type expected");
			
			break;
		}
		case 8: {
			Get();
			type = boolean;
			gen.LoadTrue(reg);
			
			break;
		}
		case 9: {
			Get();
			type = boolean;
			gen.LoadFalse(reg);
			
			break;
		}
		case 10: {
			Get();
			Expr(out reg,
out type);
			Expect(11);
			break;
		}
		default: SynErr(48); break;
		}
	}

	void Ident(out string name) {
		Expect(2);
		name = t.val; 
	}

	void String(out string text) {
		Expect(3);
		text = t.val; 
	}

	void MulOp(out Op op) {
		op = Op.MUL; 
		if (la.kind == 12) {
			Get();
		} else if (la.kind == 13 || la.kind == 14) {
			if (la.kind == 13) {
				Get();
			} else {
				Get();
			}
			op = Op.DIV; 
		} else if (la.kind == 15 || la.kind == 16) {
			if (la.kind == 15) {
				Get();
			} else {
				Get();
			}
			op = Op.MOD; 
		} else SynErr(49);
	}

	void ProcDecl(string progName) {
		string procName; int numParam=0; string pName;
		string[] pNames= new string[10];
		Expect(17);
		Ident(out procName);
		tab.NewObj(procName, proc, undef,0);
		if (procName == "main")
		 if (tab.curLevel == 0)
				tab.mainPresent = true;
		 else SemErr("main not at lexic level 0");
		tab.OpenScope();
		
		Expect(10);
		while (la.kind == 41 || la.kind == 42) {
			ParamDecl(out pName);
			pNames[numParam] = pName; numParam++;
			while (la.kind == 18) {
				Get();
				ParamDecl(out pName);
				pNames[numParam] = pName;numParam++;
			}
		}
		Expect(11);
		Expect(19);
		if (procName == "main")
		 gen.Label("Main", "Body");
		else {
		 gen.ProcNameComment(procName);
		 gen.Label(procName, "Body");
		}
		
		int i=0;
		Obj param;
		//Free registers limited to 6 (R5-R9, R12)
		if(numParam>6)
		SemErr("Too many parameters.");
		for(i=0;i<numParam;i++){
		param=tab.Find(pNames[i]);
		int reg =5+i;
		gen.LoadLocalAddress(tab.curLevel-param.level,param.adr);
		gen.StoreLocalValue(reg, pNames[i]);
		}
		
		while (la.kind == 41 || la.kind == 42) {
			VarDecl();
		}
		while (la.kind == 43) {
			ArrayDecl();
		}
		while (la.kind == 44) {
			ConstDecl();
		}
		while (la.kind == 17) {
			ProcDecl(progName);
		}
		Stat();
		while (StartOf(2)) {
			Stat();
		}
		Expect(20);
		if (procName == "main") {
		 gen.StopProgram(progName);
		 gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
		} else {
		 gen.Return(procName);
		 gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
		}
		tab.CloseScope();
		
	}

	void ParamDecl(out string pName) {
		string name; int type; 
		Type(out type);
		Ident(out name);
		pName=name;
		tab.NewObj(name, var, type,0, true); 
	}

	void VarDecl() {
		string name; int type; 
		Type(out type);
		Ident(out name);
		tab.NewObj(name, var, type,0); 
		while (la.kind == 18) {
			Get();
			Ident(out name);
			tab.NewObj(name, var, type,0); 
		}
		Expect(28);
	}

	void ArrayDecl() {
		string name; int type; int size; Obj curScope; 
		Expect(43);
		Type(out type);
		Ident(out name);
		Expect(6);
		NumberVal(out size);
		Expect(7);
		Expect(28);
		tab.NewObj(name, var, type, 0, 1, size); 
		curScope = tab.topScope;
		if(curScope==null)
		SemErr("Scope null.");
		curScope.nextAdr = curScope.nextAdr+size;  //Allocate space for the elems of the arr.
		
		
	}

	void ConstDecl() {
		string name; int type; 
		Expect(44);
		Type(out type);
		Ident(out name);
		tab.NewObj(name, var, type, 1); 
		Expect(28);
	}

	void Stat() {
		int type; string name; Obj obj; int reg; int regOffset; int type1; 
		switch (la.kind) {
		case 2: {
			Ident(out name);
			obj = tab.Find(name); 
			if (la.kind == 27) {
				Get();
				if (obj.kind != var)
				SemErr("cannot assign to procedure");
				
				if (StartOf(3)) {
					if (la.kind == 10) {
						Get();
					}
					Expr(out reg,
out type);
					if (la.kind == 28) {
						Get();
						if (type == obj.type){
						if(obj.constant==0||(obj.constant==1&&obj.assigned==0)){
							obj.assigned= obj.assigned+1;
							if (obj.level == 0){
								gen.StoreGlobal(reg, obj.adr, name); 
							}
							else{
									if(!obj.param){
								 		gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
								 	}
								 	//if obj is Param then value is the reference(the addr)
								 	//Store value at this address 
								 	else{
								 		int freeReg = gen.GetRegister();
								 		if(freeReg==reg){
								 			freeReg=gen.GetRegister();
								 		}
								 		gen.LoadLocal(freeReg,tab.curLevel-obj.level, obj.adr, name);
								 		gen.MoveRegister(2,freeReg);
								 		gen.StoreLocalValue(reg, name);
								 	}
								}
						}
						else{ SemErr("cannot assign another new value to a constant");}
						}
						
					} else if (la.kind == 11 || la.kind == 29) {
						if (la.kind == 11) {
							Get();
						}
						Expect(29);
						int exp2, endCon,reg2,reg3,regToStore,type2,type3;
						exp2 =0;
						if (type == boolean) {
						exp2 = gen.NewLabel();
						gen.BranchFalse(exp2);
						} 
						else SemErr("boolean type expected");
						
						Expr(out reg2, out type2);
						Expect(30);
						regToStore=reg2; //Set regToStore to result of expr1
						endCon= gen.NewLabel(); 
						gen.Branch(endCon); //If expr1 stored then skip to end of cond statement
						gen.Label(exp2);	//label expr2 
						
						Expr(out reg3, out type3);
						Expect(28);
						regToStore= reg3; 
						gen.Label(endCon);
						if (type3 == obj.type&&type2 == obj.type){
						if(obj.constant==0||(obj.constant==1&&obj.assigned==0)){
							obj.assigned= obj.assigned+1;
							if (obj.level == 0){
								gen.StoreGlobal(regToStore, obj.adr, name); 
							}
							else{
								if(!obj.param){
							 		gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
							 	}
							 	//if obj is Param then value is the reference(the addr)
							 	//Store value at this address 
							 	else{
							 		int freeReg = gen.GetRegister();
							 		if(freeReg==reg){
							 			freeReg=gen.GetRegister();
							 		}
							 		gen.LoadLocal(freeReg,tab.curLevel-obj.level, obj.adr, name);
							 		gen.MoveRegister(2,freeReg);
							 		gen.StoreLocalValue(reg, name);
							 	}
							}
						}
						else{ SemErr("cannot assign another new value to a constant");}
						}	
						
						
						
						
					} else SynErr(50);
				} else if (la.kind == 19) {
					Get();
					int n=0;int indexReg; 
					while (StartOf(4)) {
						if (StartOf(3)) {
							SimExpr(out reg, 
out type);
							if(type==obj.type){
							indexReg= gen.GetRegister();
							if(obj.isArray==1){
							gen.LoadConstant(indexReg,n);
							if (obj.level == 0){
							gen.StoreIndexedGlobal(reg, obj.adr, indexReg ,name); 
							}
							else{ gen.StoreIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, indexReg,name);}	
							n++;
							if(n>obj.arraySize)
							SemErr("Number of elements does not match size of array.");
							}
							else
							SemErr("Identifier not an array.");
							}
							else
							SemErr("Type mismatch.");
							
							gen.ClearRegisters();
							
						} else {
							Get();
						}
					}
					Expect(20);
					Expect(28);
					if(n!=obj.arraySize)
					SemErr("Number of elements does not match size of array.");
					
				} else SynErr(51);
			} else if (la.kind == 6) {
				Get();
				SimExpr(out regOffset, out type1);
				Expect(7);
				Expect(27);
				Expr(out reg, out type);
				Expect(28);
				if(obj.isArray==1){
				if(type==obj.type){
					if(obj.level==0)
						gen.StoreIndexedGlobal(reg, obj.adr, regOffset, name);
					else gen.StoreIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, regOffset, name);
				}
				else SemErr("Type Mismatch - Type does not match Array Type.");
				}
				else{
				SemErr("Ident not an array.");
				}
				
			} else if (la.kind == 10) {
				Get();
				string paramName; Obj param; int paramReg; 
				while (la.kind == 2) {
					Ident(out paramName);
					param= tab.Find(paramName);
					if(param.level==0){
					gen.LoadGlobalAddress(param.adr);
					}	
					else
					gen.LoadLocalAddress(tab.curLevel-param.level, param.adr);
					//Address of param now in R2 so move it to free reg
					paramReg = gen.GetRegister();
					//Check to ensure TOP and BP not corrupted
					while(paramReg==10||paramReg==11){
					paramReg= gen.GetRegister();
					}
					gen.MoveRegister(paramReg, 2);
					
					while (la.kind == 18) {
						Get();
						Ident(out paramName);
						param= tab.Find(paramName);
						if(param.level==0){
						gen.LoadGlobalAddress(param.adr);
						}	
						else
						gen.LoadLocalAddress(tab.curLevel-param.level, param.adr);
						//Address of param now in R2 so move it to free reg
						paramReg = gen.GetRegister();
						
						gen.MoveRegister(paramReg, 2);
						
						
					}
				}
				Expect(11);
				Expect(28);
				if (obj.kind == proc)
				gen.Call(name);
				else SemErr("object is not a procedure");
				
			} else if (la.kind == 31) {
				Get();
				Expect(28);
				if(obj.type==1){  //Integer check
				int valueReg = gen.GetRegister();
				//Load value in valueReg
				if(obj.level==0)
					gen.LoadGlobal(valueReg, obj.adr, name);
				else
					gen.LoadLocal(valueReg, tab.curLevel-obj.level, obj.adr, name);
				//Load 1 into constReg
				int constReg= gen.GetRegister();
				gen.LoadConstant(constReg, 1);
				//Apply Add Op
				gen.AddOp(Op.ADD, valueReg, constReg);
				//Store result back
				if(obj.level==0)
					gen.StoreGlobal(valueReg,obj.adr,name);
				else
					gen.StoreLocal(valueReg, tab.curLevel-obj.level, obj.adr, name);
				
				}  
				else
				SemErr("Object is not an integer.");
				
			} else if (la.kind == 32) {
				Get();
				Expect(28);
				if(obj.type==1){  //Integer check
				int valueReg = gen.GetRegister();
				//Load value in valueReg
				if(obj.level==0)
					gen.LoadGlobal(valueReg, obj.adr, name);
				else
					gen.LoadLocal(valueReg, tab.curLevel-obj.level, obj.adr, name);
				int constReg= gen.GetRegister();
				//Load 1 into constReg
				gen.LoadConstant(constReg, 1);
				//Apply Sub Op 
				gen.AddOp(Op.SUB, valueReg, constReg);
				//Store result back
				if(obj.level==0)
					gen.StoreGlobal(valueReg,obj.adr,name);
				else
					gen.StoreLocal(valueReg, tab.curLevel-obj.level, obj.adr, name);
				
				}  
				else
				SemErr("Object is not an integer.");
				
			} else SynErr(52);
			break;
		}
		case 33: {
			Get();
			int l1, l2; l1 = 0; 
			Expr(out reg,
out type);
			if (type == boolean) {
			 l1 = gen.NewLabel();
			 gen.BranchFalse(l1);
			}
			else SemErr("boolean type expected");
			
			Stat();
			l2 = gen.NewLabel();
			gen.Branch(l2);
			gen.Label(l1);
			
			if (la.kind == 34) {
				Get();
				Stat();
			}
			gen.Label(l2); 
			break;
		}
		case 35: {
			Get();
			int l1, l2;
			l1 = gen.NewLabel();
			gen.Label(l1); l2=0;
			
			Expr(out reg,
out type);
			if (type == boolean) {
			 l2 = gen.NewLabel();
			 gen.BranchFalse(l2);
			}
			else SemErr("boolean type expected");
			
			Stat();
			gen.Branch(l1);
			gen.Label(l2);
			
			break;
		}
		case 36: {
			Get();
			Expect(10);
			int forL, endForL, incrL,reg2,  type2; 
			Stat();
			forL= gen.NewLabel(); 
			endForL = gen.NewLabel(); 
			incrL = gen.NewLabel();
			gen.Branch(incrL);
			gen.Label(forL);
			
			Stat();
			gen.Label(incrL);
			
			
			Expr(out reg2, out type2);
			if (type2 == boolean) {
			gen.BranchFalse(endForL);
			}
			else SemErr("boolean type expected");
			
			Expect(11);
			Stat();
			gen.Branch(forL);
			gen.Label(endForL); 
			break;
		}
		case 37: {
			Get();
			Ident(out name);
			Expect(28);
			obj = tab.Find(name);
			if (obj.type == integer) {
			 gen.ReadInteger(); 
			 if (obj.level == 0)
					gen.StoreGlobal(0, obj.adr, name);
			
			 else{
				if(!obj.param){
						gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
					}
					//if obj is Param then value is the reference(the addr)
					//Store value at this address 
					else{
						int freeReg = gen.GetRegister();
						gen.LoadLocal(freeReg,tab.curLevel-obj.level, obj.adr, name);
						gen.MoveRegister(2,freeReg);
						gen.StoreLocalValue(0, name);
					}
			}
			}
			else SemErr("integer type expected");
			
			break;
		}
		case 38: {
			Get();
			string text; 
			if (StartOf(3)) {
				Expr(out reg,
out type);
				switch (type) {
				 case integer: gen.WriteInteger(reg, false);
											 break; 
				 case boolean: gen.WriteBoolean(false);
											 break;
				}
				
			} else if (la.kind == 3) {
				String(out text);
				gen.WriteString(text); 
			} else SynErr(53);
			Expect(28);
			break;
		}
		case 39: {
			Get();
			Expr(out reg,
out type);
			switch (type) {
			 case integer: gen.WriteInteger(reg, true);
										 break;
			 case boolean: gen.WriteBoolean(true);
										 break;
			}
			
			Expect(28);
			break;
		}
		case 19: {
			Get();
			tab.OpenSubScope(); 
			while (la.kind == 41 || la.kind == 42) {
				VarDecl();
			}
			while (la.kind == 44) {
				ConstDecl();
			}
			while (la.kind == 43) {
				ArrayDecl();
			}
			Stat();
			while (StartOf(2)) {
				Stat();
			}
			Expect(20);
			tab.CloseSubScope(); 
			break;
		}
		default: SynErr(54); break;
		}
	}

	void Term(out int reg,        // load value of Term into register
out int type) {
		int typeR, regR; Op op; 
		Primary(out reg,
out type);
		while (StartOf(5)) {
			MulOp(out op);
			Primary(out regR,
out typeR);
			if (type == integer && typeR == integer)
			 gen.MulOp(op, reg, regR);
			else SemErr("integer type expected");
			
		}
	}

	void Tastier() {
		string progName; 
		Expect(40);
		Ident(out progName);
		tab.OpenScope(); 
		Expect(19);
		while (StartOf(6)) {
			if (la.kind == 41 || la.kind == 42) {
				VarDecl();
			} else if (la.kind == 44) {
				ConstDecl();
			} else {
				ArrayDecl();
			}
		}
		while (la.kind == 17) {
			ProcDecl(progName);
		}
		tab.CloseScope(); 
		Expect(20);
	}

	void NumberVal(out int val) {
		Expect(1);
		val = Convert.ToInt32(t.val); 
	}

	void Type(out int type) {
		type = undef; 
		if (la.kind == 41) {
			Get();
			type = integer; 
		} else if (la.kind == 42) {
			Get();
			type = boolean; 
		} else SynErr(55);
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		Tastier();
		Expect(0);

	}
	
	static readonly bool[,] set = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,T, T,T,T,T, x,x,x,x, x,x,x},
		{x,T,T,x, x,T,x,x, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,T,T,x, x,T,x,x, T,T,T,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, T,T,T,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,T, T,x,x}

	};
} // end Parser


public class Errors {
	public int count = 0;                                    // number of errors detected
    public System.IO.TextWriter errorStream = Console.Error; // error messages go to this stream - was Console.Out DMA
    public string errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text

	public virtual void SynErr (int line, int col, int n) {
		string s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "number expected"; break;
			case 2: s = "ident expected"; break;
			case 3: s = "string expected"; break;
			case 4: s = "\"+\" expected"; break;
			case 5: s = "\"-\" expected"; break;
			case 6: s = "\"[\" expected"; break;
			case 7: s = "\"]\" expected"; break;
			case 8: s = "\"true\" expected"; break;
			case 9: s = "\"false\" expected"; break;
			case 10: s = "\"(\" expected"; break;
			case 11: s = "\")\" expected"; break;
			case 12: s = "\"*\" expected"; break;
			case 13: s = "\"div\" expected"; break;
			case 14: s = "\"DIV\" expected"; break;
			case 15: s = "\"mod\" expected"; break;
			case 16: s = "\"MOD\" expected"; break;
			case 17: s = "\"void\" expected"; break;
			case 18: s = "\",\" expected"; break;
			case 19: s = "\"{\" expected"; break;
			case 20: s = "\"}\" expected"; break;
			case 21: s = "\"=\" expected"; break;
			case 22: s = "\"<\" expected"; break;
			case 23: s = "\">\" expected"; break;
			case 24: s = "\"!=\" expected"; break;
			case 25: s = "\"<=\" expected"; break;
			case 26: s = "\">=\" expected"; break;
			case 27: s = "\":=\" expected"; break;
			case 28: s = "\";\" expected"; break;
			case 29: s = "\"?\" expected"; break;
			case 30: s = "\":\" expected"; break;
			case 31: s = "\"++\" expected"; break;
			case 32: s = "\"--\" expected"; break;
			case 33: s = "\"if\" expected"; break;
			case 34: s = "\"else\" expected"; break;
			case 35: s = "\"while\" expected"; break;
			case 36: s = "\"for\" expected"; break;
			case 37: s = "\"read\" expected"; break;
			case 38: s = "\"write\" expected"; break;
			case 39: s = "\"writeln\" expected"; break;
			case 40: s = "\"program\" expected"; break;
			case 41: s = "\"int\" expected"; break;
			case 42: s = "\"bool\" expected"; break;
			case 43: s = "\"Array\" expected"; break;
			case 44: s = "\"Final\" expected"; break;
			case 45: s = "??? expected"; break;
			case 46: s = "invalid AddOp"; break;
			case 47: s = "invalid RelOp"; break;
			case 48: s = "invalid Primary"; break;
			case 49: s = "invalid MulOp"; break;
			case 50: s = "invalid Stat"; break;
			case 51: s = "invalid Stat"; break;
			case 52: s = "invalid Stat"; break;
			case 53: s = "invalid Stat"; break;
			case 54: s = "invalid Stat"; break;
			case 55: s = "invalid Type"; break;

			default: s = "error " + n; break;
		}
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public virtual void SemErr (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}
	
	public virtual void SemErr (string s) {
		errorStream.WriteLine(s);
		count++;
	}
	
	public virtual void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public virtual void Warning(string s) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}
}